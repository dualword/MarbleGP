/** This file was generated by the Dustbin::Games LUAWrapGenerator (w) 2020 by Christian Keimel **/

#include <_generated/lua/lua_tables.h>

// 3d vector
SVector3d::SVector3d() {
  m_x = 0.0;
  m_y = 0.0;
  m_z = 0.0;
}

void SVector3d::pushToStack(lua_State *a_pState) const {
  lua_newtable(a_pState);
  lua_pushstring(a_pState, "x");
  lua_pushnumber(a_pState, m_x);
  lua_rawset(a_pState, -3);
  lua_pushstring(a_pState, "y");
  lua_pushnumber(a_pState, m_y);
  lua_rawset(a_pState, -3);
  lua_pushstring(a_pState, "z");
  lua_pushnumber(a_pState, m_z);
  lua_rawset(a_pState, -3);
}

void SVector3d::loadFromStack(lua_State *a_pState) {
  luaL_checktype(a_pState, -1, LUA_TTABLE);
  lua_pushstring(a_pState, "x");
  lua_gettable(a_pState, -2);
  if (!lua_isinteger(a_pState, lua_gettop(a_pState)) && !lua_isnumber(a_pState, lua_gettop(a_pState))) { luaL_error(a_pState, "\"m_x\" is not a number, float expected."); return ; }
  m_x = (float)lua_tonumber(a_pState, lua_gettop(a_pState)); lua_pop(a_pState, 1);
  lua_pushstring(a_pState, "y");
  lua_gettable(a_pState, -2);
  if (!lua_isinteger(a_pState, lua_gettop(a_pState)) && !lua_isnumber(a_pState, lua_gettop(a_pState))) { luaL_error(a_pState, "\"m_y\" is not a number, float expected."); return ; }
  m_y = (float)lua_tonumber(a_pState, lua_gettop(a_pState)); lua_pop(a_pState, 1);
  lua_pushstring(a_pState, "z");
  lua_gettable(a_pState, -2);
  if (!lua_isinteger(a_pState, lua_gettop(a_pState)) && !lua_isnumber(a_pState, lua_gettop(a_pState))) { luaL_error(a_pState, "\"m_z\" is not a number, float expected."); return ; }
  m_z = (float)lua_tonumber(a_pState, lua_gettop(a_pState)); lua_pop(a_pState, 1);
}

void SVector3d::copyFrom(const SVector3d &a_cOther) {
  m_x = a_cOther.m_x;
  m_y = a_cOther.m_y;
  m_z = a_cOther.m_z;
}

// RGBA color information
SColor::SColor() {
  m_r = 0;
  m_g = 0;
  m_b = 0;
  m_a = 0;
}

void SColor::pushToStack(lua_State *a_pState) const {
  lua_newtable(a_pState);
  lua_pushstring(a_pState, "r");
  lua_pushinteger(a_pState, m_r);
  lua_rawset(a_pState, -3);
  lua_pushstring(a_pState, "g");
  lua_pushinteger(a_pState, m_g);
  lua_rawset(a_pState, -3);
  lua_pushstring(a_pState, "b");
  lua_pushinteger(a_pState, m_b);
  lua_rawset(a_pState, -3);
  lua_pushstring(a_pState, "a");
  lua_pushinteger(a_pState, m_a);
  lua_rawset(a_pState, -3);
}

void SColor::loadFromStack(lua_State *a_pState) {
  luaL_checktype(a_pState, -1, LUA_TTABLE);
  lua_pushstring(a_pState, "r");
  lua_gettable(a_pState, -2);
  if (!lua_isinteger(a_pState, lua_gettop(a_pState)) && !lua_isnumber(a_pState, lua_gettop(a_pState))) { luaL_error(a_pState, "\"m_r\" is not a number, integer expected."); return ; }
  m_r = (int)lua_tointeger(a_pState, lua_gettop(a_pState)); lua_pop(a_pState, 1);
  lua_pushstring(a_pState, "g");
  lua_gettable(a_pState, -2);
  if (!lua_isinteger(a_pState, lua_gettop(a_pState)) && !lua_isnumber(a_pState, lua_gettop(a_pState))) { luaL_error(a_pState, "\"m_g\" is not a number, integer expected."); return ; }
  m_g = (int)lua_tointeger(a_pState, lua_gettop(a_pState)); lua_pop(a_pState, 1);
  lua_pushstring(a_pState, "b");
  lua_gettable(a_pState, -2);
  if (!lua_isinteger(a_pState, lua_gettop(a_pState)) && !lua_isnumber(a_pState, lua_gettop(a_pState))) { luaL_error(a_pState, "\"m_b\" is not a number, integer expected."); return ; }
  m_b = (int)lua_tointeger(a_pState, lua_gettop(a_pState)); lua_pop(a_pState, 1);
  lua_pushstring(a_pState, "a");
  lua_gettable(a_pState, -2);
  if (!lua_isinteger(a_pState, lua_gettop(a_pState)) && !lua_isnumber(a_pState, lua_gettop(a_pState))) { luaL_error(a_pState, "\"m_a\" is not a number, integer expected."); return ; }
  m_a = (int)lua_tointeger(a_pState, lua_gettop(a_pState)); lua_pop(a_pState, 1);
}

void SColor::copyFrom(const SColor &a_cOther) {
  m_r = a_cOther.m_r;
  m_g = a_cOther.m_g;
  m_b = a_cOther.m_b;
  m_a = a_cOther.m_a;
}

