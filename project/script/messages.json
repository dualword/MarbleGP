  {
  "output": {
    "header": "../_source/include/_generated/messages/",
    "source": "../_source/source/_generated/messages/",
    "include": "_generated/messages/"
  },
  "static_types": [
    "std::string", "irr::core::vector3df"
  ],
  "messageids": [
    [ "ObjectMoved"           ,  "0" ],
    [ "MarbleMoved"           ,  "1" ],
    [ "StepMsg"               ,  "2" ],
    [ "Trigger"               ,  "3" ],
    [ "PlayerAssignMarble"    ,  "4" ],
    [ "RaceSetupDone"         ,  "5" ],
    [ "PlayerRespawn"         ,  "6" ],
    [ "CameraRespawn"         ,  "7" ],
    [ "PlayerStunned"         ,  "8" ],
    [ "Checkpoint"            ,  "9" ],
    [ "LapStart"              , "10" ],
    [ "PlayerFinished"        , "11" ],
    [ "RaceFinished"          , "12" ],
    [ "Countdown"             , "13" ],
    [ "MarbleControl"         , "14" ],
    [ "CancelRace"            , "15" ],
    [ "TogglePause"           , "16" ],
    [ "PauseChanged"          , "17" ],
    [ "RacePosition"          , "18" ],
    [ "PlayerRostrum"         , "19" ],
    [ "PlayerWithdraw"        , "20" ],
    [ "ConfirmWithdraw"       , "21" ],
    [ "PlayerWithdrawn"       , "22" ],
    [ "RaceData"              , "23" ],
    [ "RegisterPlayer"        , "24" ],
    [ "UpdatePlayerId"        , "25" ],
    [ "PlayerListEnd"         , "26" ],
    [ "ServerIdentifier"      , "27" ],
    [ "ClientRequest"         , "28" ],
    [ "ClientApproval"        , "29" ],
    [ "RacePlayer"            , "30" ],
    [ "PlayerRemoved"         , "31" ],
    [ "ClientDisconnect"      , "32" ],
    [ "ServerDisconnect"      , "33" ],
    [ "LogMessage"            , "34" ],
    [ "ConnectedToServer"     , "35" ],
    [ "ChangeState"           , "36" ],
    [ "StateChanged"          , "37" ],
    [ "SetGlobalData"         , "38" ],
    [ "RaceResult"            , "39" ],
    [ "EndRaceState"          , "40" ],
    [ "DiscoverServerRequest" , "41" ],
    [ "DiscoverServerResponse", "42" ],
    [ "DiscoveryStep"         , "43" ],
    [ "GameServerFound"       , "44" ]
  ],
  "messages": {
    "ObjectMoved": {
      "comment": "This message is sent when a non-marble object has moved",
      "fields": [
        { "name": "ObjectId"       , "type": "irr::s32"            , "comment": "The ID of the object" },
        { "name": "Position"       , "type": "irr::core::vector3df", "comment": "The current position" },
        { "name": "Rotation"       , "type": "irr::core::vector3df", "comment": "The current rotation (Euler angles)" },
        { "name": "LinearVelocity" , "type": "irr::core::vector3df", "comment": "The linear velocity" },
        { "name": "AngularVelocity", "type": "irr::f32"            , "comment": "The angualar (rotation) velocity" }
      ]
    },
    "MarbleMoved": {
      "comment": "This message is sent when a marble is moved and contains additional information",
      "fields": [
        { "name": "ObjectId"       , "type": "irr::s32"            , "comment": "The ID of the object" },
        { "name": "Position"       , "type": "irr::core::vector3df", "comment": "The current position" },
        { "name": "Rotation"       , "type": "irr::core::vector3df", "comment": "The current rotation (Euler angles)" },
        { "name": "LinearVelocity" , "type": "irr::core::vector3df", "comment": "The linear velocity" },
        { "name": "AngularVelocity", "type": "irr::f32"            , "comment": "The angualar (rotation) velocity" },
        { "name": "CameraPosition" , "type": "irr::core::vector3df", "comment": "The position of the camera" },
        { "name": "CameraUp"       , "type": "irr::core::vector3df", "comment": "The Up-Vector of the camera" },
        { "name": "ControlX"       , "type": "irr::s8"             , "comment": "The marble's current controller state in X-Direction" },
        { "name": "ControlY"       , "type": "irr::s8"             , "comment": "The marble's current controller state in Y-Direction" },
        { "name": "Contact"        , "type": "bool"                , "comment": "A Flag indicating whether or not the marble is in contact with another object" },
        { "name": "ControlBrake"   , "type": "bool"                , "comment": "Flag indicating whether or not the marble's brake is active" },
        { "name": "ControlRearView", "type": "bool"                , "comment": "Flag indicating whether or not the marble's player looks behind" },
        { "name": "ControlRespawn" , "type": "bool"                , "comment": "Flag indicating whether or not the manual respawn button is pressed " }
      ]
    },
    "StepMsg": {
      "comment": "Message sent for every step (60 per second)",
      "fields": [
        { "name": "StepNo", "type": "irr::u32", "comment": "The current step number" }
      ]
    },
    "Trigger": {
      "comment": "Message indicating then a marble has triggered a trigger",
      "fields": [
        { "name": "TriggerId", "type": "irr::s32", "comment": "ID of the trigger" },
        { "name": "ObjectId" , "type": "irr::s32", "comment": "ID of the marble that caused the trigger" }
      ]
    },
    "PlayerAssignMarble": {
      "comment": "Sent by the dynamics thread to assign a marble to a player",
      "fields": [
        { "name": "playerid", "type": "irr::s32", "comment": "The ID of the player" },
        { "name": "marbleid", "type": "irr::s32", "comment": "The ID of the marble for the player" }
      ]
    },
    "RaceSetupDone": {
      "comment": "This message is sent by the dynamics thread when all players are assigned to their marbles",
      "fields": [ ]
    },
    "PlayerRespawn": {
      "comment": "This message indicates that the respawn state of a player has changed",
      "fields": [
        { "name": "MarbleId", "type": "irr::s32", "comment": "ID of the marble" },
        { "name": "State"   , "type": "irr::u8" , "comment": "New respawn state (1 == Respawn Start, 2 == Respawn Done). Between State 1 and 2 a CameraRespawn is sent" }
      ]
    },
    "CameraRespawn": {
      "comment": "This message is sent between respawn state 1 and 2 to reposition the camera",
      "fields": [
        { "name": "MarbleId", "type": "irr::s32"            , "comment": "The ID of the marble which is respawning" },
        { "name": "Position", "type": "irr::core::vector3df", "comment": "The new position of the camera" },
        { "name": "Target"  , "type": "irr::core::vector3df", "comment": "The new target of the camera, i.e. the future position of the marble" }
      ]
    },
    "PlayerStunned": {
      "comment": "This message indicates that the stunned state of a player has changed",
      "fields": [
        { "name": "MarbleId", "type": "irr::s32", "comment": "ID of the marble" },
        { "name": "State"   , "type": "irr::u8" , "comment": "New stunned state (1 == Player stunned, 2 == Player recovered)" }
      ]
    },
    "Checkpoint": {
      "comment": "A player has passed a checkpoint",
      "fields": [
        { "name": "MarbleId"  , "type": "irr::s32", "comment": "ID of the marble" },
        { "name": "Checkpoint", "type": "irr::s32", "comment": "The checkpoint ID the player has passed" }
      ]
    },
    "LapStart": {
      "comment": "A player has started a new lap",
      "fields": [
        { "name": "MarbleId", "type": "irr::s32", "comment": "ID of the marble" },
        { "name": "LapNo"   , "type": "irr::s32", "comment": "Number of the started lap" }
      ]
    },
    "PlayerFinished": {
      "comment": "A player has finished the race",
      "fields": [
        { "name": "MarbleId", "type": "irr::s32", "comment": "ID of the finished marble" },
        { "name": "RaceTime", "type": "irr::u32", "comment": "Racetime of the finished player in simulation steps" },
        { "name": "Laps"    , "type": "irr::s32", "comment": "The number of laps the player has done" }
      ]
    },
    "RaceFinished": {
      "comment": "The race has ended",
      "fields": [
        { "name": "Cancelled", "type": "irr::u8", "comment": "A flag indicating whether or not the race was cancelled by a player" }
      ]
    },
    "Countdown": {
      "comment": "Countdown message before the start of the race",
      "fields": [
        { "name": "Tick", "type": "irr::u8", "comment": "The countdown tick (4 == Ready, 3, 2, 1, 0 == Go)" }
      ]
    },
    "MarbleControl": {
      "comment": "The control message for a marble",
      "fields": [
        { "name": "ObjectId", "type": "irr::s32", "comment": "The ID of the Marble" },
        { "name": "CtrlX"   , "type": "irr::s8" , "comment": "The X Control (steer)" },
        { "name": "CtrlY"   , "type": "irr::s8" , "comment": "The Y Control (throttle)" },
        { "name": "Brake"   , "type": "bool"    , "comment": "Is the brake active?" },
        { "name": "RearView", "type": "bool"    , "comment": "Does the player want to look back?" },
        { "name": "Respawn" , "type": "bool"    , "comment": "Is the manual respawn button pressed?" }
      ]
    },
    "CancelRace": {
      "comment": "This message cancels a race",
      "fields": [ ]
    },
    "TogglePause": {
      "comment": "This message pauses and unpauses the game",
      "fields": [ ]
    },
    "PauseChanged": {
      "comment": "The dynamic thread uses this message to notify the game thread about paused / unpaused game",
      "fields": [
        { "name": "Paused", "type": "bool", "comment": "The current paused state" }
      ]
    },
    "RacePosition": {
      "comment": "Message to notify about the position of a marble in a race",
      "fields": [
        { "name": "MarbleId"     , "type": "irr::s32", "comment": "ID of the marble" },
        { "name": "Position"     , "type": "irr::s32", "comment": "Position of the marble" },
        { "name": "Laps"         , "type": "irr::s32", "comment": "The current lap of the marble" },
        { "name": "DeficitAhead" , "type": "irr::s32", "comment": "Deficit of the marble on the marble ahead in steps" },
        { "name": "DeficitLeader", "type": "irr::s32", "comment": "Deficit of the marble on the leader in steps" }
      ]
    },
    "PlayerRostrum": {
      "comment": "This message is sent when a marble was moved to the rostrum after finishing the race",
      "fields": [
        { "name": "MarbleId", "type": "irr::s32", "comment": "ID of the marble" }
      ]
    },
    "PlayerWithdraw": {
      "comment": "This message is sent by a player to withdraw from the race. For confirmation it must be sent twice within a second or so",
      "fields": [ 
        { "name": "MarbleId", "type": "irr::s32", "comment": "ID of the marble" }
      ]
    },
    "ConfirmWithdraw": {
      "comment": "Using this message the physics thread notifies the player that a confirmation is necessary to withdraw from the race",
      "fields": [
        { "name": "MarbleId", "type": "irr::s32", "comment": "ID of the marble" },
        { "name": "Timeout" , "type": "irr::s32", "comment": "The number of steps defining the timeout for the withdrawal" }
      ]
    },
    "PlayerWithdrawn": {
      "comment": "Confirm that a player has withdrawn from the race",
      "fields": [ 
        { "name": "MarbleId", "type": "irr::s32", "comment": "ID of the marble" }
      ]
    },
    "RaceData": {
      "comment": "This message is sent by the dynamics thread and informs about the data of the race",
      "fields": [
        { "name": "data", "type": "std::string", "comment": "Encoded SGameData structure" }
      ]
    },
    "RegisterPlayer": {
      "comment": "Register a player via a network connection",
      "fields": [
        { "name": "name"   , "type": "std::string", "comment": "name of the player" },
        { "name": "texture", "type": "std::string", "comment": "texture of the player" },
        { "name": "ident"  , "type": "irr::s32"   , "comment": "The original player ID on the client" }
      ]
    },
    "UpdatePlayerId": {
      "comment": "This message is used by the server to notify a client about the network player id of a newly registered player",
      "fields": [
        { "name": "original_id", "type": "irr::s32", "comment": "The ID the client has sent with a 'RegisterPlayer' message" },
        { "name": "netgame_id" , "type": "irr::s32", "comment": "The ID assigned by the server to the client's player" }
      ]
    },
    "PlayerListEnd": {
      "comment": "Sent by the network client once all it's players are registered",
      "fields": [ ]
    },
    "ServerIdentifier": {
      "comment": "Message sent by the server upon connection to identify that it's a MarbleGP server",
      "fields": [
        { "name": "identify" , "type": "std::string", "comment": "identifier of the server (MarbleGP Server)" },
        { "name": "freeslots", "type": "irr::s32"   , "comment": "the number of free player slots on the server" }
      ]
    },
    "ClientRequest": {
      "comment": "Response to the server identifier message requesting a number of player slots",
      "fields": [
        { "name": "playerslots", "type": "irr::s32", "comment": "Number of players the client would like to connect" } 
      ]
    },
    "ClientApproval": {
      "comment": "Response to the client request message used by the server to tell how many players can be added",
      "fields": [
        { "name": "slotsassigned", "type": "irr::s32", "comment": "Number of player slots assigned to the client" }
      ]
    },
    "RacePlayer": {
      "comment": "Notification sent by the server about a player of the race.",
      "fields": [
        { "name": "playerid", "type": "irr::s32"   , "comment": "ID of the player" },
        { "name": "name"    , "type": "std::string", "comment": "Name of the player" },
        { "name": "texture" , "type": "std::string", "comment": "Texture of the player" }
      ]
    },
    "PlayerRemoved": {
      "comment": "Using this message the game server removes players of disconnected peers in the setup network game dialog",
      "fields": [
        { "name": "playerid", "type": "irr::s32", "comment": "ID of the removed player" }
      ]
    },
    "ClientDisconnect": {
      "comment": "A message sent by the network server if a client has disconnected",
      "fields": [ ]
    },
    "ServerDisconnect": {
      "comment": "This message is created by the network client class if the connection to the server is lost",
      "fields": [ ]
    },
    "LogMessage": {
      "comment": "Logging message used in the net game lobby to notify about what the server does",
      "fields": [
        { "name": "message", "type": "std::string", "comment": "A message from the server" }
      ]
    },
    "ConnectedToServer": {
      "comment": "A notification from the game client thread to the rest to confirm that the connection was established",
      "fields": [ ]
    },
    "ChangeState": {
      "comment": "The server uses this message to inform the clients that they need to change their current state",
      "fields": [
        { "name": "newstate", "type": "std::string", "comment": "ID of the state to change to" }
      ]
    },
    "StateChanged": {
      "comment": "This is the reply that the client sends to the server when the state change triggered by ChangeState is done",
      "fields": [
        { "name": "newstate", "type": "std::string", "comment": "ID of the state to change to" }
      ]
    },
    "SetGlobalData": {
      "comment": "The server uses this message to set some global data on the client, e.g. race definition",
      "fields": [
        { "name": "key"  , "type": "std::string", "comment": "The global data key to be set" },
        { "name": "value", "type": "std::string", "comment": "The global value to be stored with the key" }
      ]
    },
    "RaceResult": {
      "comment": "Sent by the dynamics thread to notify the game state(s) about the race result",
      "fields": [
        { "name": "data", "type": "std::string", "comment": "Encoded SRacePlayer structure" }
      ]
    },
    "EndRaceState": {
      "comment": "Message sent by the dynamics thread to notify all listeners that they can proceeed to the results state",
      "fields": [ ]
    },
    "DiscoverServerRequest": {
      "comment": "This message is broadcasted by the client in the hope of a server to respond",
      "fields": [
        { "name": "game", "type": "std::string", "comment": "Name of the game we are searching for" }
      ]
    },
    "DiscoverServerResponse": {
      "comment": "The answer sent by the server in reply to the DiscoverServerRequest message",
      "fields": [
        { "name": "port"  , "type": "irr::s32"   , "comment": "The port the server is running on" },
        { "name": "server", "type": "std::string", "comment": "The network name of the server" }
      ]
    },
    "DiscoveryStep": {
      "comment": "This message is sent every time the server discovery client sends a broadcast to the network",
      "fields": [ ]
    },
    "GameServerFound": {
      "comment": "This is the message sent by the server discovery thread to the UI thread for every found game server",
      "fields": [
        { "name": "server", "type": "irr::u32"   , "comment": "The IP address of the server" },
        { "name": "portno", "type": "irr::u32"   , "comment": "The port the server is listening to" },
        { "name": "name"  , "type": "std::string", "comment": "Humand-readable name of the server" }
      ]
    }
  },
  "interfaces": [
    {
      "name": "DynamicThread",
      "send": [
        "StepMsg",
        "Countdown",
        "ObjectMoved",
        "MarbleMoved",
        "Trigger",
        "PlayerAssignMarble",
        "RaceSetupDone",
        "PlayerRespawn",
        "CameraRespawn",
        "PlayerStunned",
        "PlayerFinished",
        "RaceFinished",
        "Checkpoint",
        "LapStart",
        "PauseChanged",
        "RacePosition",
        "PlayerRostrum",
        "ConfirmWithdraw",
        "PlayerWithdrawn",
        "RaceResult",
        "EndRaceState",
        "PlayerRemoved"
      ],
      "receive": [
        "MarbleControl",
        "CancelRace",
        "TogglePause",
        "PlayerWithdraw",
        "PlayerRemoved"
      ]
    },
    {
      "name": "GameState",
      "send": [
        "MarbleControl",
        "CancelRace",
        "TogglePause",
        "PlayerWithdraw"
      ],
      "receive": [
        "StepMsg",
        "Countdown",
        "ObjectMoved",
        "MarbleMoved",
        "Trigger",
        "PlayerAssignMarble",
        "RaceSetupDone",
        "PlayerRespawn",
        "CameraRespawn",
        "PlayerStunned",
        "PlayerFinished",
        "RaceFinished",
        "Checkpoint",
        "LapStart",
        "RacePosition",
        "PlayerWithdrawn",
        "ServerDisconnect",
        "RaceResult",
        "EndRaceState",
        "PlayerRemoved",
        "PauseChanged"
      ]
    },
    {
      "name": "GameHUD",
      "send": [ ],
      "receive": [
        "PlayerRespawn",
        "PlayerFinished",
        "PlayerStunned",
        "RaceFinished",
        "RacePosition",
        "MarbleMoved",
        "LapStart",
        "PlayerRostrum",
        "Countdown",
        "StepMsg",
        "ConfirmWithdraw",
        "PauseChanged",
        "Checkpoint"
      ]
    },
    {
      "name": "AiController",
      "send": [
        "MarbleControl"
      ],
      "receive": [
        "StepMsg",
        "ObjectMoved",
        "MarbleMoved",
        "PlayerRespawn"
      ]
    }
  ]
}